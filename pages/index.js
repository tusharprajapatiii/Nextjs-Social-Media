import React, { useEffect, useState } from "react";
import Head from "next/head";
import ProfilePic from "../components/Home/ProfilePic";
import RightBar from "../components/Home/RightBar";
import axios from "axios";
import { server } from "../lib/utils";
import { useDispatch, useSelector } from "react-redux";
import { toast } from "react-toastify";
import { useRouter } from "next/router";
import TopPosts from "../components/Home/TopPosts";
import CreatePostInput from "../components/Home/CreatePostInput";
import PostList from "../components/Home/PostList";
import { getFeedPosts, reset } from "../redux/services/postsSlice";
import dynamic from "next/dynamic";
// import PostModal from "../components/modals/PostModal";
const PostModal = dynamic(() => import("../components/modals/PostModal"), {
  ssr: false,
});
export default function Home({ users, discover }) {
  const dispatch = useDispatch();
  const [post, setPost] = useState(false);

  const router = useRouter();
  const { user, token, message } = useSelector((state) => state.auth);
  const { isSuccess } = useSelector((state) => state.posts);
  React.useEffect(() => {
    if (message) toast.error(message);
    if (!user || !token) router.push("/signup");
  }, [token, message, router]);
  useEffect(() => {
    dispatch(getFeedPosts(token));
  }, [dispatch, token, router]);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <ProfilePic />
      <main>
        <RightBar users={users} />
        <div className="hidden  lg:block">
          <TopPosts posts={discover} />
        </div>
        <div className="flex flex-col items-center lg:items-start lg:flex-row  ">
          <CreatePostInput setPost={setPost} />
          <div className="lg:hidden">
            <TopPosts posts={discover} />
          </div>
          <PostList />
        </div>
        {post && <PostModal setPost={setPost} post={post} />}
      </main>
    </div>
  );
}
export const getServerSideProps = async (ctx) => {
  const { token } = ctx.req.cookies;
  // if (!token) {
  //   ctx.res.writeHead(302, {
  //     Location: "/signup",
  //   });
  // }
  const res = await axios.get(`/api/users/suggestedusers`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });
  const discoverResponse = await axios.get(`/api/posts/discover`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });

  return {
    props: {
      // users: res.data.users,
      users: res.data.users,
      discover: discoverResponse.data.posts,
    },
  };
};
